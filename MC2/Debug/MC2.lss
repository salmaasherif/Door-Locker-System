
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002788  0000281c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080017c  0080017c  00002938  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001359  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000064a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006645  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b656  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__vector_3>
      10:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 05 11 	jmp	0x220a	; 0x220a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__vector_8>
      24:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <main>
      8a:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <buzzer_Init>:
#include "gpio.h"

#define BUZZER_PORT_ID   PORTC_ID
#define BUZZER_PIN_ID    PIN3_ID

void buzzer_Init(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	63 e0       	ldi	r22, 0x03	; 3
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	buzzer_OFF();
     e40:	0e 94 31 07 	call	0xe62	; 0xe62 <buzzer_OFF>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <buzzer_ON>:

void buzzer_ON(){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	63 e0       	ldi	r22, 0x03	; 3
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <buzzer_OFF>:

void buzzer_OFF(){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	63 e0       	ldi	r22, 0x03	; 3
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <DcMotor_Init>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>
#include "pwm.h"

void DcMotor_Init(void){
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID, 0 , PIN_OUTPUT);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, 1 , PIN_OUTPUT);
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	//initially, motor is off
	CLEAR_BIT(PORTB,0);
     e96:	a8 e3       	ldi	r26, 0x38	; 56
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e8 e3       	ldi	r30, 0x38	; 56
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,1);
     ea4:	a8 e3       	ldi	r26, 0x38	; 56
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e8 e3       	ldi	r30, 0x38	; 56
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	8c 93       	st	X, r24
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state){
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
	if(state==cw){    /* for cw rotation */
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	41 f4       	brne	.+16     	; 0xeda <DcMotor_Rotate+0x22>
		SET_BIT(PORTB,0);
     eca:	a8 e3       	ldi	r26, 0x38	; 56
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e8 e3       	ldi	r30, 0x38	; 56
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	8c 93       	st	X, r24
     ed8:	19 c0       	rjmp	.+50     	; 0xf0c <DcMotor_Rotate+0x54>
	}
	else if(state==acw){    /* for acw rotation */
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	41 f4       	brne	.+16     	; 0xef0 <DcMotor_Rotate+0x38>
		SET_BIT(PORTB,1);
     ee0:	a8 e3       	ldi	r26, 0x38	; 56
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e8 e3       	ldi	r30, 0x38	; 56
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	8c 93       	st	X, r24
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <DcMotor_Rotate+0x54>
	}
	else {  /*stop*/
		CLEAR_BIT(PORTB,0);
     ef0:	a8 e3       	ldi	r26, 0x38	; 56
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e8 e3       	ldi	r30, 0x38	; 56
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,1);
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	8c 93       	st	X, r24
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <EEPROM_writeByte+0x6>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <EEPROM_writeByte+0x8>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f26:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f2a:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     f2e:	88 30       	cpi	r24, 0x08	; 8
     f30:	11 f0       	breq	.+4      	; 0xf36 <EEPROM_writeByte+0x22>
        return ERROR;
     f32:	1c 82       	std	Y+4, r1	; 0x04
     f34:	28 c0       	rjmp	.+80     	; 0xf86 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	80 70       	andi	r24, 0x00	; 0
     f3c:	97 70       	andi	r25, 0x07	; 7
     f3e:	88 0f       	add	r24, r24
     f40:	89 2f       	mov	r24, r25
     f42:	88 1f       	adc	r24, r24
     f44:	99 0b       	sbc	r25, r25
     f46:	91 95       	neg	r25
     f48:	80 6a       	ori	r24, 0xA0	; 160
     f4a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f4e:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     f52:	88 31       	cpi	r24, 0x18	; 24
     f54:	11 f0       	breq	.+4      	; 0xf5a <EEPROM_writeByte+0x46>
        return ERROR; 
     f56:	1c 82       	std	Y+4, r1	; 0x04
     f58:	16 c0       	rjmp	.+44     	; 0xf86 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f60:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     f64:	88 32       	cpi	r24, 0x28	; 40
     f66:	11 f0       	breq	.+4      	; 0xf6c <EEPROM_writeByte+0x58>
        return ERROR;
     f68:	1c 82       	std	Y+4, r1	; 0x04
     f6a:	0d c0       	rjmp	.+26     	; 0xf86 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f72:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     f76:	88 32       	cpi	r24, 0x28	; 40
     f78:	11 f0       	breq	.+4      	; 0xf7e <EEPROM_writeByte+0x6a>
        return ERROR;
     f7a:	1c 82       	std	Y+4, r1	; 0x04
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     f7e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <TWI_stop>
	
    return SUCCESS;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	8c 83       	std	Y+4, r24	; 0x04
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <EEPROM_readByte+0x6>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <EEPROM_readByte+0x8>
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	7c 83       	std	Y+4, r23	; 0x04
     faa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     fac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     fb0:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     fb4:	88 30       	cpi	r24, 0x08	; 8
     fb6:	11 f0       	breq	.+4      	; 0xfbc <EEPROM_readByte+0x26>
        return ERROR;
     fb8:	1d 82       	std	Y+5, r1	; 0x05
     fba:	44 c0       	rjmp	.+136    	; 0x1044 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	80 70       	andi	r24, 0x00	; 0
     fc2:	97 70       	andi	r25, 0x07	; 7
     fc4:	88 0f       	add	r24, r24
     fc6:	89 2f       	mov	r24, r25
     fc8:	88 1f       	adc	r24, r24
     fca:	99 0b       	sbc	r25, r25
     fcc:	91 95       	neg	r25
     fce:	80 6a       	ori	r24, 0xA0	; 160
     fd0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     fd4:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     fd8:	88 31       	cpi	r24, 0x18	; 24
     fda:	11 f0       	breq	.+4      	; 0xfe0 <EEPROM_readByte+0x4a>
        return ERROR;
     fdc:	1d 82       	std	Y+5, r1	; 0x05
     fde:	32 c0       	rjmp	.+100    	; 0x1044 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fe6:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     fea:	88 32       	cpi	r24, 0x28	; 40
     fec:	11 f0       	breq	.+4      	; 0xff2 <EEPROM_readByte+0x5c>
        return ERROR;
     fee:	1d 82       	std	Y+5, r1	; 0x05
     ff0:	29 c0       	rjmp	.+82     	; 0x1044 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     ff2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     ff6:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
     ffa:	80 31       	cpi	r24, 0x10	; 16
     ffc:	11 f0       	breq	.+4      	; 0x1002 <EEPROM_readByte+0x6c>
        return ERROR;
     ffe:	1d 82       	std	Y+5, r1	; 0x05
    1000:	21 c0       	rjmp	.+66     	; 0x1044 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	80 70       	andi	r24, 0x00	; 0
    1008:	97 70       	andi	r25, 0x07	; 7
    100a:	88 0f       	add	r24, r24
    100c:	89 2f       	mov	r24, r25
    100e:	88 1f       	adc	r24, r24
    1010:	99 0b       	sbc	r25, r25
    1012:	91 95       	neg	r25
    1014:	81 6a       	ori	r24, 0xA1	; 161
    1016:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    101a:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
    101e:	80 34       	cpi	r24, 0x40	; 64
    1020:	11 f0       	breq	.+4      	; 0x1026 <EEPROM_readByte+0x90>
        return ERROR;
    1022:	1d 82       	std	Y+5, r1	; 0x05
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1026:	0e 94 29 12 	call	0x2452	; 0x2452 <TWI_readByteWithNACK>
    102a:	eb 81       	ldd	r30, Y+3	; 0x03
    102c:	fc 81       	ldd	r31, Y+4	; 0x04
    102e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1030:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_getStatus>
    1034:	88 35       	cpi	r24, 0x58	; 88
    1036:	11 f0       	breq	.+4      	; 0x103c <EEPROM_readByte+0xa6>
        return ERROR;
    1038:	1d 82       	std	Y+5, r1	; 0x05
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    103c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <TWI_stop>

    return SUCCESS;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <GPIO_setupPinDirection+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <GPIO_setupPinDirection+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	08 f0       	brcs	.+2      	; 0x1072 <GPIO_setupPinDirection+0x1c>
    1070:	d5 c0       	rjmp	.+426    	; 0x121c <GPIO_setupPinDirection+0x1c6>
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <GPIO_setupPinDirection+0x24>
    1078:	d1 c0       	rjmp	.+418    	; 0x121c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <GPIO_setupPinDirection+0x3a>
    108e:	43 c0       	rjmp	.+134    	; 0x1116 <GPIO_setupPinDirection+0xc0>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <GPIO_setupPinDirection+0x4e>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	71 f0       	breq	.+28     	; 0x10be <GPIO_setupPinDirection+0x68>
    10a2:	bc c0       	rjmp	.+376    	; 0x121c <GPIO_setupPinDirection+0x1c6>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <GPIO_setupPinDirection+0x5a>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <GPIO_setupPinDirection+0x118>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <GPIO_setupPinDirection+0x66>
    10ba:	85 c0       	rjmp	.+266    	; 0x11c6 <GPIO_setupPinDirection+0x170>
    10bc:	af c0       	rjmp	.+350    	; 0x121c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_setupPinDirection+0x8c>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_setupPinDirection+0x88>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	98 c0       	rjmp	.+304    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10ec:	aa e3       	ldi	r26, 0x3A	; 58
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e3       	ldi	r30, 0x3A	; 58
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_setupPinDirection+0xb4>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_setupPinDirection+0xb0>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	83 c0       	rjmp	.+262    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	a1 f4       	brne	.+40     	; 0x1144 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    111c:	a7 e3       	ldi	r26, 0x37	; 55
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_setupPinDirection+0xe4>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_setupPinDirection+0xe0>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	6c c0       	rjmp	.+216    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1144:	a7 e3       	ldi	r26, 0x37	; 55
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e3       	ldi	r30, 0x37	; 55
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_setupPinDirection+0x10c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_setupPinDirection+0x108>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	57 c0       	rjmp	.+174    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1174:	a4 e3       	ldi	r26, 0x34	; 52
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e3       	ldi	r30, 0x34	; 52
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_setupPinDirection+0x13c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_setupPinDirection+0x138>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	40 c0       	rjmp	.+128    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    119c:	a4 e3       	ldi	r26, 0x34	; 52
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_setupPinDirection+0x164>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_setupPinDirection+0x160>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	2b c0       	rjmp	.+86     	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11cc:	a1 e3       	ldi	r26, 0x31	; 49
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e1 e3       	ldi	r30, 0x31	; 49
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_setupPinDirection+0x194>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_setupPinDirection+0x190>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11f4:	a1 e3       	ldi	r26, 0x31	; 49
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_setupPinDirection+0x1bc>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_setupPinDirection+0x1b8>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_writePin+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_writePin+0x8>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
    123e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	08 f0       	brcs	.+2      	; 0x1248 <GPIO_writePin+0x1c>
    1246:	d5 c0       	rjmp	.+426    	; 0x13f2 <GPIO_writePin+0x1c6>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	08 f0       	brcs	.+2      	; 0x1250 <GPIO_writePin+0x24>
    124e:	d1 c0       	rjmp	.+418    	; 0x13f2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <GPIO_writePin+0x3a>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <GPIO_writePin+0xc0>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <GPIO_writePin+0x4e>
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	71 f0       	breq	.+28     	; 0x1294 <GPIO_writePin+0x68>
    1278:	bc c0       	rjmp	.+376    	; 0x13f2 <GPIO_writePin+0x1c6>
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <GPIO_writePin+0x5a>
    1284:	5f c0       	rjmp	.+190    	; 0x1344 <GPIO_writePin+0x118>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <GPIO_writePin+0x66>
    1290:	85 c0       	rjmp	.+266    	; 0x139c <GPIO_writePin+0x170>
    1292:	af c0       	rjmp	.+350    	; 0x13f2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	a1 f4       	brne	.+40     	; 0x12c2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    129a:	ab e3       	ldi	r26, 0x3B	; 59
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_writePin+0x8c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_writePin+0x88>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	98 c0       	rjmp	.+304    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_writePin+0xb4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_writePin+0xb0>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	83 c0       	rjmp	.+262    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_writePin+0xe4>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_writePin+0xe0>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	6c c0       	rjmp	.+216    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    131a:	a8 e3       	ldi	r26, 0x38	; 56
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_writePin+0x10c>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_writePin+0x108>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	57 c0       	rjmp	.+174    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_writePin+0x13c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_writePin+0x138>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	40 c0       	rjmp	.+128    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_writePin+0x164>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_writePin+0x160>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	2b c0       	rjmp	.+86     	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13a2:	a2 e3       	ldi	r26, 0x32	; 50
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e2 e3       	ldi	r30, 0x32	; 50
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_writePin+0x194>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_writePin+0x190>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13ca:	a2 e3       	ldi	r26, 0x32	; 50
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e2 e3       	ldi	r30, 0x32	; 50
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_writePin+0x1bc>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_writePin+0x1b8>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GPIO_readPin+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <GPIO_readPin+0x8>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	8a 83       	std	Y+2, r24	; 0x02
    1412:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1414:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	08 f0       	brcs	.+2      	; 0x141e <GPIO_readPin+0x1c>
    141c:	84 c0       	rjmp	.+264    	; 0x1526 <GPIO_readPin+0x124>
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	08 f0       	brcs	.+2      	; 0x1426 <GPIO_readPin+0x24>
    1424:	80 c0       	rjmp	.+256    	; 0x1526 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	4c 81       	ldd	r20, Y+4	; 0x04
    1432:	5d 81       	ldd	r21, Y+5	; 0x05
    1434:	41 30       	cpi	r20, 0x01	; 1
    1436:	51 05       	cpc	r21, r1
    1438:	79 f1       	breq	.+94     	; 0x1498 <GPIO_readPin+0x96>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <GPIO_readPin+0x4e>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	69 f0       	breq	.+26     	; 0x1468 <GPIO_readPin+0x66>
    144e:	6b c0       	rjmp	.+214    	; 0x1526 <GPIO_readPin+0x124>
    1450:	4c 81       	ldd	r20, Y+4	; 0x04
    1452:	5d 81       	ldd	r21, Y+5	; 0x05
    1454:	42 30       	cpi	r20, 0x02	; 2
    1456:	51 05       	cpc	r21, r1
    1458:	b9 f1       	breq	.+110    	; 0x14c8 <GPIO_readPin+0xc6>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <GPIO_readPin+0x64>
    1464:	49 c0       	rjmp	.+146    	; 0x14f8 <GPIO_readPin+0xf6>
    1466:	5f c0       	rjmp	.+190    	; 0x1526 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_readPin+0x7e>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_readPin+0x7a>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	88 23       	and	r24, r24
    148c:	19 f0       	breq	.+6      	; 0x1494 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	49 c0       	rjmp	.+146    	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	47 c0       	rjmp	.+142    	; 0x1526 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_readPin+0xae>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_readPin+0xaa>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	88 23       	and	r24, r24
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	31 c0       	rjmp	.+98     	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	2f c0       	rjmp	.+94     	; 0x1526 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14c8:	e3 e3       	ldi	r30, 0x33	; 51
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_readPin+0xde>
    14dc:	55 95       	asr	r21
    14de:	47 95       	ror	r20
    14e0:	8a 95       	dec	r24
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_readPin+0xda>
    14e4:	ca 01       	movw	r24, r20
    14e6:	81 70       	andi	r24, 0x01	; 1
    14e8:	90 70       	andi	r25, 0x00	; 0
    14ea:	88 23       	and	r24, r24
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	19 c0       	rjmp	.+50     	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	17 c0       	rjmp	.+46     	; 0x1526 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_readPin+0x10e>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_readPin+0x10a>
    1514:	ca 01       	movw	r24, r20
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	90 70       	andi	r25, 0x00	; 0
    151a:	88 23       	and	r24, r24
    151c:	19 f0       	breq	.+6      	; 0x1524 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1524:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <GPIO_setupPortDirection+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <GPIO_setupPortDirection+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	90 f5       	brcc	.+100    	; 0x15b2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	d1 f0       	breq	.+52     	; 0x1596 <GPIO_setupPortDirection+0x5e>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <GPIO_setupPortDirection+0x3e>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <GPIO_setupPortDirection+0x54>
    1574:	1e c0       	rjmp	.+60     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	81 f0       	breq	.+32     	; 0x15a0 <GPIO_setupPortDirection+0x68>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	81 f0       	breq	.+32     	; 0x15aa <GPIO_setupPortDirection+0x72>
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	80 83       	st	Z, r24
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	80 83       	st	Z, r24
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	80 83       	st	Z, r24
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15aa:	e1 e3       	ldi	r30, 0x31	; 49
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <GPIO_writePort+0x6>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <GPIO_writePort+0x8>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	90 f5       	brcc	.+100    	; 0x163a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3c 83       	std	Y+4, r19	; 0x04
    15de:	2b 83       	std	Y+3, r18	; 0x03
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	d1 f0       	breq	.+52     	; 0x161e <GPIO_writePort+0x5e>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <GPIO_writePort+0x3e>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	61 f0       	breq	.+24     	; 0x1614 <GPIO_writePort+0x54>
    15fc:	1e c0       	rjmp	.+60     	; 0x163a <GPIO_writePort+0x7a>
    15fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1600:	3c 81       	ldd	r19, Y+4	; 0x04
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <GPIO_writePort+0x68>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	81 f0       	breq	.+32     	; 0x1632 <GPIO_writePort+0x72>
    1612:	13 c0       	rjmp	.+38     	; 0x163a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1614:	eb e3       	ldi	r30, 0x3B	; 59
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	0e c0       	rjmp	.+28     	; 0x163a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    161e:	e8 e3       	ldi	r30, 0x38	; 56
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
    1626:	09 c0       	rjmp	.+18     	; 0x163a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
    1630:	04 c0       	rjmp	.+8      	; 0x163a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1632:	e2 e3       	ldi	r30, 0x32	; 50
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
			break;
		}
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <GPIO_readPort+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <GPIO_readPort+0x8>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1656:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	90 f5       	brcc	.+100    	; 0x16c2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3c 83       	std	Y+4, r19	; 0x04
    1666:	2b 83       	std	Y+3, r18	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	d1 f0       	breq	.+52     	; 0x16a6 <GPIO_readPort+0x5e>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <GPIO_readPort+0x3e>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 f0       	breq	.+24     	; 0x169c <GPIO_readPort+0x54>
    1684:	1e c0       	rjmp	.+60     	; 0x16c2 <GPIO_readPort+0x7a>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	81 f0       	breq	.+32     	; 0x16b0 <GPIO_readPort+0x68>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <GPIO_readPort+0x72>
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    169c:	e9 e3       	ldi	r30, 0x39	; 57
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	0e c0       	rjmp	.+28     	; 0x16c2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16a6:	e6 e3       	ldi	r30, 0x36	; 54
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16b0:	e3 e3       	ldi	r30, 0x33	; 51
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16ba:	e0 e3       	ldi	r30, 0x30	; 48
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <handshake>:
void save_password();
void password_init();
void handshake();

/*Function Definitions*/
void handshake(){
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != MC1_READY);
    16da:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_recieveByte>
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	e1 f7       	brne	.-8      	; 0x16da <handshake+0x8>
	UART_sendByte(MC2_READY);
    16e2:	80 e1       	ldi	r24, 0x10	; 16
    16e4:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <open_door>:

void open_door(){
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
	handshake();
    16f6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <handshake>
	if(UART_recieveByte() == OPEN_DOOR ){
    16fa:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_recieveByte>
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	09 f0       	breq	.+2      	; 0x1704 <open_door+0x16>
    1702:	5f c0       	rjmp	.+190    	; 0x17c2 <open_door+0xd4>
		handshake();
    1704:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <handshake>
		uart_receivePassword(confirmation_pass);
    1708:	85 e8       	ldi	r24, 0x85	; 133
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 82 0c 	call	0x1904	; 0x1904 <uart_receivePassword>
		read_saved_password();
    1710:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <read_saved_password>

		if(compare_password(saved_pass,confirmation_pass) == 1){
    1714:	8f e8       	ldi	r24, 0x8F	; 143
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	25 e8       	ldi	r18, 0x85	; 133
    171a:	31 e0       	ldi	r19, 0x01	; 1
    171c:	b9 01       	movw	r22, r18
    171e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <compare_password>
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	89 f5       	brne	.+98     	; 0x1788 <open_door+0x9a>
			UART_sendByte(PASS_MATCH);
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
			g_seconds = 0;
    172c:	10 92 7d 01 	sts	0x017D, r1
    1730:	10 92 7c 01 	sts	0x017C, r1
			DcMotor_Rotate(cw);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DcMotor_Rotate>
			while (g_seconds < ROTATING_PERIOD);
    173a:	80 91 7c 01 	lds	r24, 0x017C
    173e:	90 91 7d 01 	lds	r25, 0x017D
    1742:	85 30       	cpi	r24, 0x05	; 5
    1744:	91 05       	cpc	r25, r1
    1746:	c8 f3       	brcs	.-14     	; 0x173a <open_door+0x4c>
			g_seconds = 0;
    1748:	10 92 7d 01 	sts	0x017D, r1
    174c:	10 92 7c 01 	sts	0x017C, r1
			DcMotor_Rotate(stop);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DcMotor_Rotate>
			while (g_seconds < STOPPING_PERIOD);
    1756:	80 91 7c 01 	lds	r24, 0x017C
    175a:	90 91 7d 01 	lds	r25, 0x017D
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	c8 f3       	brcs	.-14     	; 0x1756 <open_door+0x68>
			g_seconds = 0;
    1764:	10 92 7d 01 	sts	0x017D, r1
    1768:	10 92 7c 01 	sts	0x017C, r1
			DcMotor_Rotate(acw);
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DcMotor_Rotate>
			while (g_seconds < ROTATING_PERIOD);
    1772:	80 91 7c 01 	lds	r24, 0x017C
    1776:	90 91 7d 01 	lds	r25, 0x017D
    177a:	85 30       	cpi	r24, 0x05	; 5
    177c:	91 05       	cpc	r25, r1
    177e:	c8 f3       	brcs	.-14     	; 0x1772 <open_door+0x84>
			DcMotor_Rotate(stop);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DcMotor_Rotate>
    1786:	1d c0       	rjmp	.+58     	; 0x17c2 <open_door+0xd4>
		}
		else{
			num_of_wrong_attempts++;
    1788:	80 91 94 01 	lds	r24, 0x0194
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	80 93 94 01 	sts	0x0194, r24
			UART_sendByte(PASS_MISMATCH);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
			if(num_of_wrong_attempts == NUMBER_OF_WRONG_ATTEMPTS){
    1798:	80 91 94 01 	lds	r24, 0x0194
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	89 f4       	brne	.+34     	; 0x17c2 <open_door+0xd4>
				buzzer_ON();
    17a0:	0e 94 25 07 	call	0xe4a	; 0xe4a <buzzer_ON>
				g_seconds=0;
    17a4:	10 92 7d 01 	sts	0x017D, r1
    17a8:	10 92 7c 01 	sts	0x017C, r1
				while(g_seconds < BUZZER_ON_PERIOD);
    17ac:	80 91 7c 01 	lds	r24, 0x017C
    17b0:	90 91 7d 01 	lds	r25, 0x017D
    17b4:	86 30       	cpi	r24, 0x06	; 6
    17b6:	91 05       	cpc	r25, r1
    17b8:	c8 f3       	brcs	.-14     	; 0x17ac <open_door+0xbe>
				buzzer_OFF();
    17ba:	0e 94 31 07 	call	0xe62	; 0xe62 <buzzer_OFF>
				num_of_wrong_attempts=0;
    17be:	10 92 94 01 	sts	0x0194, r1
			}
		}
	}
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <read_saved_password>:

void read_saved_password(){
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	60 97       	sbiw	r28, 0x10	; 16
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
	int i;
	for (i = 0; i < 5; ++i) {
    17dc:	18 8a       	std	Y+16, r1	; 0x10
    17de:	1f 86       	std	Y+15, r1	; 0x0f
    17e0:	82 c0       	rjmp	.+260    	; 0x18e6 <read_saved_password+0x11e>
		EEPROM_readByte(EEPROM_START + i, saved_pass+i);
    17e2:	4f 85       	ldd	r20, Y+15	; 0x0f
    17e4:	58 89       	ldd	r21, Y+16	; 0x10
    17e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e8:	98 89       	ldd	r25, Y+16	; 0x10
    17ea:	9c 01       	movw	r18, r24
    17ec:	21 57       	subi	r18, 0x71	; 113
    17ee:	3e 4f       	sbci	r19, 0xFE	; 254
    17f0:	ca 01       	movw	r24, r20
    17f2:	b9 01       	movw	r22, r18
    17f4:	0e 94 cb 07 	call	0xf96	; 0xf96 <EEPROM_readByte>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a8 ec       	ldi	r26, 0xC8	; 200
    17fe:	b2 e4       	ldi	r27, 0x42	; 66
    1800:	8b 87       	std	Y+11, r24	; 0x0b
    1802:	9c 87       	std	Y+12, r25	; 0x0c
    1804:	ad 87       	std	Y+13, r26	; 0x0d
    1806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6b 85       	ldd	r22, Y+11	; 0x0b
    180a:	7c 85       	ldd	r23, Y+12	; 0x0c
    180c:	8d 85       	ldd	r24, Y+13	; 0x0d
    180e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8f 83       	std	Y+7, r24	; 0x07
    1822:	98 87       	std	Y+8, r25	; 0x08
    1824:	a9 87       	std	Y+9, r26	; 0x09
    1826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <read_saved_password+0x82>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <read_saved_password+0x100>
	else if (__tmp > 65535)
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <read_saved_password+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6b 85       	ldd	r22, Y+11	; 0x0b
    1864:	7c 85       	ldd	r23, Y+12	; 0x0c
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <read_saved_password+0xe2>
    188c:	89 e1       	ldi	r24, 0x19	; 25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <read_saved_password+0xd0>
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <read_saved_password+0xc4>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <read_saved_password+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <read_saved_password+0x10c>
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
	}
}

void read_saved_password(){
	int i;
	for (i = 0; i < 5; ++i) {
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	98 89       	ldd	r25, Y+16	; 0x10
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	98 8b       	std	Y+16, r25	; 0x10
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	98 89       	ldd	r25, Y+16	; 0x10
    18ea:	85 30       	cpi	r24, 0x05	; 5
    18ec:	91 05       	cpc	r25, r1
    18ee:	0c f4       	brge	.+2      	; 0x18f2 <read_saved_password+0x12a>
    18f0:	78 cf       	rjmp	.-272    	; 0x17e2 <read_saved_password+0x1a>
		EEPROM_readByte(EEPROM_START + i, saved_pass+i);
		_delay_ms(100);
	}
}
    18f2:	60 96       	adiw	r28, 0x10	; 16
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <uart_receivePassword>:

void uart_receivePassword(uint8 array[5]){
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <uart_receivePassword+0xa>
    190e:	0f 92       	push	r0
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9b 83       	std	Y+3, r25	; 0x03
    1916:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i=0 ; i<5 ; i++){
    1918:	19 82       	std	Y+1, r1	; 0x01
    191a:	0f c0       	rjmp	.+30     	; 0x193a <uart_receivePassword+0x36>
		*(array + i) = UART_recieveByte();
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	8c 01       	movw	r16, r24
    1928:	02 0f       	add	r16, r18
    192a:	13 1f       	adc	r17, r19
    192c:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_recieveByte>
    1930:	f8 01       	movw	r30, r16
    1932:	80 83       	st	Z, r24
	}
}

void uart_receivePassword(uint8 array[5]){
	uint8 i;
	for (i=0 ; i<5 ; i++){
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	85 30       	cpi	r24, 0x05	; 5
    193e:	70 f3       	brcs	.-36     	; 0x191c <uart_receivePassword+0x18>
		*(array + i) = UART_recieveByte();
	}
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	08 95       	ret

00001950 <compare_password>:
uint8 compare_password(uint8 a1[5],uint8 a2[5]){
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	27 97       	sbiw	r28, 0x07	; 7
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	9d 83       	std	Y+5, r25	; 0x05
    1966:	8c 83       	std	Y+4, r24	; 0x04
    1968:	7f 83       	std	Y+7, r23	; 0x07
    196a:	6e 83       	std	Y+6, r22	; 0x06
	uint8 x;
	for(int i = 0 ; i < 5 ; i++){
    196c:	1a 82       	std	Y+2, r1	; 0x02
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	1b c0       	rjmp	.+54     	; 0x19a8 <compare_password+0x58>
		if(a1[i] == a2[i]){x=1;}
    1972:	29 81       	ldd	r18, Y+1	; 0x01
    1974:	3a 81       	ldd	r19, Y+2	; 0x02
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	fc 01       	movw	r30, r24
    197c:	e2 0f       	add	r30, r18
    197e:	f3 1f       	adc	r31, r19
    1980:	40 81       	ld	r20, Z
    1982:	29 81       	ldd	r18, Y+1	; 0x01
    1984:	3a 81       	ldd	r19, Y+2	; 0x02
    1986:	8e 81       	ldd	r24, Y+6	; 0x06
    1988:	9f 81       	ldd	r25, Y+7	; 0x07
    198a:	fc 01       	movw	r30, r24
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	80 81       	ld	r24, Z
    1992:	48 17       	cp	r20, r24
    1994:	19 f4       	brne	.+6      	; 0x199c <compare_password+0x4c>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	01 c0       	rjmp	.+2      	; 0x199e <compare_password+0x4e>
		else{x=0;}
    199c:	1b 82       	std	Y+3, r1	; 0x03
		*(array + i) = UART_recieveByte();
	}
}
uint8 compare_password(uint8 a1[5],uint8 a2[5]){
	uint8 x;
	for(int i = 0 ; i < 5 ; i++){
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	85 30       	cpi	r24, 0x05	; 5
    19ae:	91 05       	cpc	r25, r1
    19b0:	04 f3       	brlt	.-64     	; 0x1972 <compare_password+0x22>
		if(a1[i] == a2[i]){x=1;}
		else{x=0;}
	}
	return x;
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19b4:	27 96       	adiw	r28, 0x07	; 7
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <save_password>:
void save_password(){
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	60 97       	sbiw	r28, 0x10	; 16
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0 ; i < 5 ; i++){
    19da:	18 8a       	std	Y+16, r1	; 0x10
    19dc:	1f 86       	std	Y+15, r1	; 0x0f
    19de:	83 c0       	rjmp	.+262    	; 0x1ae6 <save_password+0x120>
		EEPROM_writeByte(EEPROM_START + i,recieved_pass1[i]);
    19e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    19e2:	38 89       	ldd	r19, Y+16	; 0x10
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	fc 01       	movw	r30, r24
    19ea:	eb 56       	subi	r30, 0x6B	; 107
    19ec:	fe 4f       	sbci	r31, 0xFE	; 254
    19ee:	40 81       	ld	r20, Z
    19f0:	c9 01       	movw	r24, r18
    19f2:	64 2f       	mov	r22, r20
    19f4:	0e 94 8a 07 	call	0xf14	; 0xf14 <EEPROM_writeByte>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a8 ec       	ldi	r26, 0xC8	; 200
    19fe:	b2 e4       	ldi	r27, 0x42	; 66
    1a00:	8b 87       	std	Y+11, r24	; 0x0b
    1a02:	9c 87       	std	Y+12, r25	; 0x0c
    1a04:	ad 87       	std	Y+13, r26	; 0x0d
    1a06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a e7       	ldi	r20, 0x7A	; 122
    1a16:	53 e4       	ldi	r21, 0x43	; 67
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8f 83       	std	Y+7, r24	; 0x07
    1a22:	98 87       	std	Y+8, r25	; 0x08
    1a24:	a9 87       	std	Y+9, r26	; 0x09
    1a26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <save_password+0x84>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <save_password+0x102>
	else if (__tmp > 65535)
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <save_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <save_password+0xe4>
    1a8c:	89 e1       	ldi	r24, 0x19	; 25
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <save_password+0xd2>
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <save_password+0xc6>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <save_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <save_password+0x10e>
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
		else{x=0;}
	}
	return x;
}
void save_password(){
	for (int i = 0 ; i < 5 ; i++){
    1adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ade:	98 89       	ldd	r25, Y+16	; 0x10
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	8f 87       	std	Y+15, r24	; 0x0f
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	85 30       	cpi	r24, 0x05	; 5
    1aec:	91 05       	cpc	r25, r1
    1aee:	0c f4       	brge	.+2      	; 0x1af2 <save_password+0x12c>
    1af0:	77 cf       	rjmp	.-274    	; 0x19e0 <save_password+0x1a>
		EEPROM_writeByte(EEPROM_START + i,recieved_pass1[i]);
		_delay_ms(100);
	}
}
    1af2:	60 96       	adiw	r28, 0x10	; 16
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <password_init>:
void password_init(){
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62

	handshake();
    1b0c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <handshake>
	uart_receivePassword(recieved_pass1);
    1b10:	85 e9       	ldi	r24, 0x95	; 149
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 82 0c 	call	0x1904	; 0x1904 <uart_receivePassword>

	handshake();
    1b18:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <handshake>
	uart_receivePassword(recieved_pass2);
    1b1c:	8a e8       	ldi	r24, 0x8A	; 138
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	0e 94 82 0c 	call	0x1904	; 0x1904 <uart_receivePassword>

	UART_sendByte(compare_password(recieved_pass1,recieved_pass2));
    1b24:	85 e9       	ldi	r24, 0x95	; 149
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	2a e8       	ldi	r18, 0x8A	; 138
    1b2a:	31 e0       	ldi	r19, 0x01	; 1
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <compare_password>
    1b32:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
	if(compare_password(recieved_pass1,recieved_pass2)==1){
    1b36:	85 e9       	ldi	r24, 0x95	; 149
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	2a e8       	ldi	r18, 0x8A	; 138
    1b3c:	31 e0       	ldi	r19, 0x01	; 1
    1b3e:	b9 01       	movw	r22, r18
    1b40:	0e 94 a8 0c 	call	0x1950	; 0x1950 <compare_password>
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <password_init+0x4a>
		save_password();
    1b48:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <save_password>
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <password_init+0x50>
	}
	else{
		UART_sendByte(PASS_MISMATCH);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
	}
}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <timer_counter>:
void timer_counter(){
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    1b62:	80 91 7c 01 	lds	r24, 0x017C
    1b66:	90 91 7d 01 	lds	r25, 0x017D
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	90 93 7d 01 	sts	0x017D, r25
    1b70:	80 93 7c 01 	sts	0x017C, r24
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <main>:

int main(){
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	a2 97       	sbiw	r28, 0x22	; 34
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7);
    1b8e:	af e5       	ldi	r26, 0x5F	; 95
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ef e5       	ldi	r30, 0x5F	; 95
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	8c 93       	st	X, r24
	uart_config uart_ptr = {char_size_8, disabled, 1, 9600};
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	9d 8b       	std	Y+21, r25	; 0x15
    1ba2:	8c 8b       	std	Y+20, r24	; 0x14
    1ba4:	e6 e7       	ldi	r30, 0x76	; 118
    1ba6:	f1 e0       	ldi	r31, 0x01	; 1
    1ba8:	ff 8b       	std	Y+23, r31	; 0x17
    1baa:	ee 8b       	std	Y+22, r30	; 0x16
    1bac:	f5 e0       	ldi	r31, 0x05	; 5
    1bae:	f8 8f       	std	Y+24, r31	; 0x18
    1bb0:	ee 89       	ldd	r30, Y+22	; 0x16
    1bb2:	ff 89       	ldd	r31, Y+23	; 0x17
    1bb4:	00 80       	ld	r0, Z
    1bb6:	8e 89       	ldd	r24, Y+22	; 0x16
    1bb8:	9f 89       	ldd	r25, Y+23	; 0x17
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	9f 8b       	std	Y+23, r25	; 0x17
    1bbe:	8e 8b       	std	Y+22, r24	; 0x16
    1bc0:	ec 89       	ldd	r30, Y+20	; 0x14
    1bc2:	fd 89       	ldd	r31, Y+21	; 0x15
    1bc4:	00 82       	st	Z, r0
    1bc6:	8c 89       	ldd	r24, Y+20	; 0x14
    1bc8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	9d 8b       	std	Y+21, r25	; 0x15
    1bce:	8c 8b       	std	Y+20, r24	; 0x14
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	91 50       	subi	r25, 0x01	; 1
    1bd4:	98 8f       	std	Y+24, r25	; 0x18
    1bd6:	e8 8d       	ldd	r30, Y+24	; 0x18
    1bd8:	ee 23       	and	r30, r30
    1bda:	51 f7       	brne	.-44     	; 0x1bb0 <main+0x36>
	UART_init(&uart_ptr);
    1bdc:	ce 01       	movw	r24, r28
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_init>
	/* Timer freq = 8MHz/1024, one clock-cycle time = 128 uSecond
	 interrupt every 1 second ,, compare value 1/(128us) = 7813 */
	Timer_configuration timer_config_ptr = { Timer1, compare, 0, 7813, pre1024, timer_counter };
    1be4:	ce 01       	movw	r24, r28
    1be6:	06 96       	adiw	r24, 0x06	; 6
    1be8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bea:	89 8f       	std	Y+25, r24	; 0x19
    1bec:	ed e6       	ldi	r30, 0x6D	; 109
    1bee:	f1 e0       	ldi	r31, 0x01	; 1
    1bf0:	fc 8f       	std	Y+28, r31	; 0x1c
    1bf2:	eb 8f       	std	Y+27, r30	; 0x1b
    1bf4:	f9 e0       	ldi	r31, 0x09	; 9
    1bf6:	fd 8f       	std	Y+29, r31	; 0x1d
    1bf8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1bfa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1bfc:	00 80       	ld	r0, Z
    1bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	9c 8f       	std	Y+28, r25	; 0x1c
    1c06:	8b 8f       	std	Y+27, r24	; 0x1b
    1c08:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c0a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c0c:	00 82       	st	Z, r0
    1c0e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	9a 8f       	std	Y+26, r25	; 0x1a
    1c16:	89 8f       	std	Y+25, r24	; 0x19
    1c18:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c1a:	91 50       	subi	r25, 0x01	; 1
    1c1c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c1e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1c20:	ee 23       	and	r30, r30
    1c22:	51 f7       	brne	.-44     	; 0x1bf8 <main+0x7e>
	Timer_init(&timer_config_ptr);
    1c24:	ce 01       	movw	r24, r28
    1c26:	06 96       	adiw	r24, 0x06	; 6
    1c28:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <Timer_init>
	TWI_Config twi_ptr = {fast , pre_1};
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	0f 96       	adiw	r24, 0x0f	; 15
    1c30:	9f 8f       	std	Y+31, r25	; 0x1f
    1c32:	8e 8f       	std	Y+30, r24	; 0x1e
    1c34:	e8 e6       	ldi	r30, 0x68	; 104
    1c36:	f1 e0       	ldi	r31, 0x01	; 1
    1c38:	f9 a3       	std	Y+33, r31	; 0x21
    1c3a:	e8 a3       	std	Y+32, r30	; 0x20
    1c3c:	f5 e0       	ldi	r31, 0x05	; 5
    1c3e:	fa a3       	std	Y+34, r31	; 0x22
    1c40:	e8 a1       	ldd	r30, Y+32	; 0x20
    1c42:	f9 a1       	ldd	r31, Y+33	; 0x21
    1c44:	00 80       	ld	r0, Z
    1c46:	88 a1       	ldd	r24, Y+32	; 0x20
    1c48:	99 a1       	ldd	r25, Y+33	; 0x21
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	99 a3       	std	Y+33, r25	; 0x21
    1c4e:	88 a3       	std	Y+32, r24	; 0x20
    1c50:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1c52:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1c54:	00 82       	st	Z, r0
    1c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	9f 8f       	std	Y+31, r25	; 0x1f
    1c5e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	91 50       	subi	r25, 0x01	; 1
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	ea a1       	ldd	r30, Y+34	; 0x22
    1c68:	ee 23       	and	r30, r30
    1c6a:	51 f7       	brne	.-44     	; 0x1c40 <main+0xc6>
	TWI_init(&twi_ptr);
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0f 96       	adiw	r24, 0x0f	; 15
    1c70:	0e 94 9e 11 	call	0x233c	; 0x233c <TWI_init>
	DcMotor_Init();
    1c74:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DcMotor_Init>
	buzzer_Init();
    1c78:	0e 94 17 07 	call	0xe2e	; 0xe2e <buzzer_Init>
	password_init();
    1c7c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <password_init>
	while(1){
		state=UART_recieveByte();
    1c80:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_recieveByte>
    1c84:	80 93 84 01 	sts	0x0184, r24
		if(state == OPEN_DOOR){
    1c88:	80 91 84 01 	lds	r24, 0x0184
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <main+0x11c>
			open_door();
    1c90:	0e 94 77 0b 	call	0x16ee	; 0x16ee <open_door>
    1c94:	f5 cf       	rjmp	.-22     	; 0x1c80 <main+0x106>
		}
		else if(state == CHANGE_PASS)
    1c96:	80 91 84 01 	lds	r24, 0x0184
    1c9a:	84 30       	cpi	r24, 0x04	; 4
    1c9c:	89 f7       	brne	.-30     	; 0x1c80 <main+0x106>
		{
			handshake();
    1c9e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <handshake>
			uart_receivePassword(confirmation_pass);
    1ca2:	85 e8       	ldi	r24, 0x85	; 133
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	0e 94 82 0c 	call	0x1904	; 0x1904 <uart_receivePassword>
			read_saved_password();
    1caa:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <read_saved_password>

			if(compare_password(confirmation_pass,saved_pass)==1){
    1cae:	85 e8       	ldi	r24, 0x85	; 133
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	2f e8       	ldi	r18, 0x8F	; 143
    1cb4:	31 e0       	ldi	r19, 0x01	; 1
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <compare_password>
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	79 f4       	brne	.+30     	; 0x1cde <main+0x164>
				UART_sendByte(PASS_MATCH);
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
				handshake();
    1cc6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <handshake>
				uart_receivePassword(recieved_pass1);
    1cca:	85 e9       	ldi	r24, 0x95	; 149
    1ccc:	91 e0       	ldi	r25, 0x01	; 1
    1cce:	0e 94 82 0c 	call	0x1904	; 0x1904 <uart_receivePassword>
				save_password();
    1cd2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <save_password>
				UART_sendByte(PASS_CHANGED);
    1cd6:	86 e0       	ldi	r24, 0x06	; 6
    1cd8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
    1cdc:	d1 cf       	rjmp	.-94     	; 0x1c80 <main+0x106>
			}
			else{
				UART_sendByte(PASS_MISMATCH);
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
				num_of_wrong_attempts++;
    1ce4:	80 91 94 01 	lds	r24, 0x0194
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	80 93 94 01 	sts	0x0194, r24
				if(num_of_wrong_attempts == NUMBER_OF_WRONG_ATTEMPTS){
    1cee:	80 91 94 01 	lds	r24, 0x0194
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	29 f6       	brne	.-118    	; 0x1c80 <main+0x106>
					buzzer_ON();
    1cf6:	0e 94 25 07 	call	0xe4a	; 0xe4a <buzzer_ON>
					g_seconds=0;
    1cfa:	10 92 7d 01 	sts	0x017D, r1
    1cfe:	10 92 7c 01 	sts	0x017C, r1
					while(g_seconds < BUZZER_ON_PERIOD);
    1d02:	80 91 7c 01 	lds	r24, 0x017C
    1d06:	90 91 7d 01 	lds	r25, 0x017D
    1d0a:	86 30       	cpi	r24, 0x06	; 6
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	c8 f3       	brcs	.-14     	; 0x1d02 <main+0x188>
					buzzer_OFF();
    1d10:	0e 94 31 07 	call	0xe62	; 0xe62 <buzzer_OFF>
					num_of_wrong_attempts=0;
    1d14:	10 92 94 01 	sts	0x0194, r1
    1d18:	b3 cf       	rjmp	.-154    	; 0x1c80 <main+0x106>

00001d1a <PWM_Timer0_Start>:
#include <avr/io.h>
#include "gpio.h"

void PWM_Timer0_Start(uint8 speed){
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	0f 92       	push	r0
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
    1d2a:	e3 e5       	ldi	r30, 0x53	; 83
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	8a e6       	ldi	r24, 0x6A	; 106
    1d30:	80 83       	st	Z, r24
	TCNT0=0;
    1d32:	e2 e5       	ldi	r30, 0x52	; 82
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	10 82       	st	Z, r1
	OCR0=(uint8)(((float32)speed/100)*255);
    1d38:	0c e5       	ldi	r16, 0x5C	; 92
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e0       	ldi	r26, 0x00	; 0
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	48 ec       	ldi	r20, 0xC8	; 200
    1d5c:	52 e4       	ldi	r21, 0x42	; 66
    1d5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	53 e4       	ldi	r21, 0x43	; 67
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	f8 01       	movw	r30, r16
    1d88:	80 83       	st	Z, r24
	DDRB|=(1<<PB3);
    1d8a:	a7 e3       	ldi	r26, 0x37	; 55
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e7 e3       	ldi	r30, 0x37	; 55
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	88 60       	ori	r24, 0x08	; 8
    1d96:	8c 93       	st	X, r24
//	TCNT1 = 0;
//	//OCR1A = (uint8)(((float32)duty_cycle/100)*255);
//	OCR1A = 255;
//	GPIO_setupPinDirection(PORTD_ID, 5, PIN_OUTPUT);

}
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <Timer_init>:

static void (*g_Timer0CallBackPtr)(void) = NULL_PTR;
static void (*g_Timer1CallBackPtr)(void) = NULL_PTR;
static void (*g_Timer2CallBackPtr)(void) = NULL_PTR;

void Timer_init(const Timer_configuration *timer_config){
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <Timer_init+0x6>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    1db2:	e9 81       	ldd	r30, Y+1	; 0x01
    1db4:	fa 81       	ldd	r31, Y+2	; 0x02
    1db6:	80 81       	ld	r24, Z
    1db8:	88 23       	and	r24, r24
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <Timer_init+0x1a>
    1dbc:	59 c0       	rjmp	.+178    	; 0x1e70 <Timer_init+0xcc>

		SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1dbe:	a3 e5       	ldi	r26, 0x53	; 83
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e3 e5       	ldi	r30, 0x53	; 83
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 68       	ori	r24, 0x80	; 128
    1dca:	8c 93       	st	X, r24
		TCNT0 = timer_config->initialValue;
    1dcc:	a2 e5       	ldi	r26, 0x52	; 82
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	8c 93       	st	X, r24
		TCCR0 = 0;
    1dda:	e3 e5       	ldi	r30, 0x53	; 83
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    1de0:	a3 e5       	ldi	r26, 0x53	; 83
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e3 e5       	ldi	r30, 0x53	; 83
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	90 81       	ld	r25, Z
    1dea:	e9 81       	ldd	r30, Y+1	; 0x01
    1dec:	fa 81       	ldd	r31, Y+2	; 0x02
    1dee:	86 81       	ldd	r24, Z+6	; 0x06
    1df0:	89 2b       	or	r24, r25
    1df2:	8c 93       	st	X, r24

		if (timer_config->mode == overflow){
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	81 81       	ldd	r24, Z+1	; 0x01
    1dfa:	88 23       	and	r24, r24
    1dfc:	79 f4       	brne	.+30     	; 0x1e1c <Timer_init+0x78>
			SET_BIT(TIMSK,TOIE0);
    1dfe:	a9 e5       	ldi	r26, 0x59	; 89
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e9 e5       	ldi	r30, 0x59	; 89
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	81 60       	ori	r24, 0x01	; 1
    1e0a:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0);
    1e0c:	a8 e5       	ldi	r26, 0x58	; 88
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e8 e5       	ldi	r30, 0x58	; 88
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	81 60       	ori	r24, 0x01	; 1
    1e18:	8c 93       	st	X, r24
    1e1a:	21 c0       	rjmp	.+66     	; 0x1e5e <Timer_init+0xba>

		}else if (timer_config->mode == compare){
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e20:	81 81       	ldd	r24, Z+1	; 0x01
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	e1 f4       	brne	.+56     	; 0x1e5e <Timer_init+0xba>
			SET_BIT(TCCR0,WGM01);
    1e26:	a3 e5       	ldi	r26, 0x53	; 83
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e3 e5       	ldi	r30, 0x53	; 83
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 60       	ori	r24, 0x08	; 8
    1e32:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    1e34:	ac e5       	ldi	r26, 0x5C	; 92
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	84 81       	ldd	r24, Z+4	; 0x04
    1e3e:	95 81       	ldd	r25, Z+5	; 0x05
    1e40:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
    1e42:	a9 e5       	ldi	r26, 0x59	; 89
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e9 e5       	ldi	r30, 0x59	; 89
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	82 60       	ori	r24, 0x02	; 2
    1e4e:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0);
    1e50:	a8 e5       	ldi	r26, 0x58	; 88
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e8 e5       	ldi	r30, 0x58	; 88
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 60       	ori	r24, 0x02	; 2
    1e5c:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr;
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	87 81       	ldd	r24, Z+7	; 0x07
    1e64:	90 85       	ldd	r25, Z+8	; 0x08
    1e66:	90 93 7f 01 	sts	0x017F, r25
    1e6a:	80 93 7e 01 	sts	0x017E, r24
    1e6e:	c4 c0       	rjmp	.+392    	; 0x1ff8 <Timer_init+0x254>


	}else if (timer_config->timer_ID == Timer1){
    1e70:	e9 81       	ldd	r30, Y+1	; 0x01
    1e72:	fa 81       	ldd	r31, Y+2	; 0x02
    1e74:	80 81       	ld	r24, Z
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <Timer_init+0xd8>
    1e7a:	60 c0       	rjmp	.+192    	; 0x1f3c <Timer_init+0x198>
		TCCR1A =0;
    1e7c:	ef e4       	ldi	r30, 0x4F	; 79
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A);
    1e82:	af e4       	ldi	r26, 0x4F	; 79
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	ef e4       	ldi	r30, 0x4F	; 79
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 60       	ori	r24, 0x08	; 8
    1e8e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1e90:	af e4       	ldi	r26, 0x4F	; 79
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ef e4       	ldi	r30, 0x4F	; 79
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	84 60       	ori	r24, 0x04	; 4
    1e9c:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    1e9e:	ae e4       	ldi	r26, 0x4E	; 78
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	86 81       	ldd	r24, Z+6	; 0x06
    1ea8:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    1eaa:	ac e4       	ldi	r26, 0x4C	; 76
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	11 96       	adiw	r26, 0x01	; 1
    1eb8:	9c 93       	st	X, r25
    1eba:	8e 93       	st	-X, r24

		if (timer_config->mode == overflow) {
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	81 81       	ldd	r24, Z+1	; 0x01
    1ec2:	88 23       	and	r24, r24
    1ec4:	79 f4       	brne	.+30     	; 0x1ee4 <Timer_init+0x140>
			SET_BIT(TIMSK, TOIE1);
    1ec6:	a9 e5       	ldi	r26, 0x59	; 89
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e9 e5       	ldi	r30, 0x59	; 89
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	84 60       	ori	r24, 0x04	; 4
    1ed2:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    1ed4:	a8 e5       	ldi	r26, 0x58	; 88
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e8 e5       	ldi	r30, 0x58	; 88
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	84 60       	ori	r24, 0x04	; 4
    1ee0:	8c 93       	st	X, r24
    1ee2:	23 c0       	rjmp	.+70     	; 0x1f2a <Timer_init+0x186>

		} else if (timer_config->mode == compare) {
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	81 81       	ldd	r24, Z+1	; 0x01
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	f1 f4       	brne	.+60     	; 0x1f2a <Timer_init+0x186>
			SET_BIT(TCCR1B, WGM12);
    1eee:	ae e4       	ldi	r26, 0x4E	; 78
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ee e4       	ldi	r30, 0x4E	; 78
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 60       	ori	r24, 0x08	; 8
    1efa:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1efc:	aa e4       	ldi	r26, 0x4A	; 74
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e9 81       	ldd	r30, Y+1	; 0x01
    1f02:	fa 81       	ldd	r31, Y+2	; 0x02
    1f04:	84 81       	ldd	r24, Z+4	; 0x04
    1f06:	95 81       	ldd	r25, Z+5	; 0x05
    1f08:	11 96       	adiw	r26, 0x01	; 1
    1f0a:	9c 93       	st	X, r25
    1f0c:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);
    1f0e:	a9 e5       	ldi	r26, 0x59	; 89
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e9 e5       	ldi	r30, 0x59	; 89
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 61       	ori	r24, 0x10	; 16
    1f1a:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A);
    1f1c:	a8 e5       	ldi	r26, 0x58	; 88
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e8 e5       	ldi	r30, 0x58	; 88
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 61       	ori	r24, 0x10	; 16
    1f28:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	87 81       	ldd	r24, Z+7	; 0x07
    1f30:	90 85       	ldd	r25, Z+8	; 0x08
    1f32:	90 93 81 01 	sts	0x0181, r25
    1f36:	80 93 80 01 	sts	0x0180, r24
    1f3a:	5e c0       	rjmp	.+188    	; 0x1ff8 <Timer_init+0x254>
	}
	else if (timer_config->timer_ID == Timer2){
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	80 81       	ld	r24, Z
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <Timer_init+0x1a4>
    1f46:	58 c0       	rjmp	.+176    	; 0x1ff8 <Timer_init+0x254>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1f48:	a5 e4       	ldi	r26, 0x45	; 69
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e5 e4       	ldi	r30, 0x45	; 69
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 68       	ori	r24, 0x80	; 128
    1f54:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    1f56:	a4 e4       	ldi	r26, 0x44	; 68
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	8c 93       	st	X, r24
		TCCR2 = 0;
    1f64:	e5 e4       	ldi	r30, 0x45	; 69
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1f6a:	a5 e4       	ldi	r26, 0x45	; 69
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e5 e4       	ldi	r30, 0x45	; 69
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	90 81       	ld	r25, Z
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	86 81       	ldd	r24, Z+6	; 0x06
    1f7a:	89 2b       	or	r24, r25
    1f7c:	8c 93       	st	X, r24

		if (timer_config->mode == overflow) {
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	81 81       	ldd	r24, Z+1	; 0x01
    1f84:	88 23       	and	r24, r24
    1f86:	79 f4       	brne	.+30     	; 0x1fa6 <Timer_init+0x202>
			SET_BIT(TIMSK, TOIE2);
    1f88:	a9 e5       	ldi	r26, 0x59	; 89
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e9 e5       	ldi	r30, 0x59	; 89
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 64       	ori	r24, 0x40	; 64
    1f94:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2);
    1f96:	a8 e5       	ldi	r26, 0x58	; 88
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e8 e5       	ldi	r30, 0x58	; 88
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 64       	ori	r24, 0x40	; 64
    1fa2:	8c 93       	st	X, r24
    1fa4:	21 c0       	rjmp	.+66     	; 0x1fe8 <Timer_init+0x244>
		}
		else if (timer_config->mode == compare) {
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	81 81       	ldd	r24, Z+1	; 0x01
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	e1 f4       	brne	.+56     	; 0x1fe8 <Timer_init+0x244>
			SET_BIT(TCCR0, WGM21);
    1fb0:	a3 e5       	ldi	r26, 0x53	; 83
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e3 e5       	ldi	r30, 0x53	; 83
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	88 60       	ori	r24, 0x08	; 8
    1fbc:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    1fbe:	a3 e4       	ldi	r26, 0x43	; 67
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc6:	84 81       	ldd	r24, Z+4	; 0x04
    1fc8:	95 81       	ldd	r25, Z+5	; 0x05
    1fca:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    1fcc:	a9 e5       	ldi	r26, 0x59	; 89
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e9 e5       	ldi	r30, 0x59	; 89
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 68       	ori	r24, 0x80	; 128
    1fd8:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2);
    1fda:	a8 e5       	ldi	r26, 0x58	; 88
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e8 e5       	ldi	r30, 0x58	; 88
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 68       	ori	r24, 0x80	; 128
    1fe6:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fea:	fa 81       	ldd	r31, Y+2	; 0x02
    1fec:	87 81       	ldd	r24, Z+7	; 0x07
    1fee:	90 85       	ldd	r25, Z+8	; 0x08
    1ff0:	90 93 83 01 	sts	0x0183, r25
    1ff4:	80 93 82 01 	sts	0x0182, r24
	}
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <Timer_deinit>:


void Timer_deinit(Timer_ID timer_ID){
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	0f 92       	push	r0
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	88 23       	and	r24, r24
    2012:	e1 f4       	brne	.+56     	; 0x204c <Timer_deinit+0x4a>
		TCCR0 = 0;
    2014:	e3 e5       	ldi	r30, 0x53	; 83
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	10 82       	st	Z, r1
		TCNT0= 0;
    201a:	e2 e5       	ldi	r30, 0x52	; 82
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	10 82       	st	Z, r1
		OCR0 = 0;
    2020:	ec e5       	ldi	r30, 0x5C	; 92
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0);
    2026:	a9 e5       	ldi	r26, 0x59	; 89
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e9 e5       	ldi	r30, 0x59	; 89
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	8d 7f       	andi	r24, 0xFD	; 253
    2032:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0);
    2034:	a9 e5       	ldi	r26, 0x59	; 89
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e9 e5       	ldi	r30, 0x59	; 89
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8e 7f       	andi	r24, 0xFE	; 254
    2040:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR;
    2042:	10 92 7f 01 	sts	0x017F, r1
    2046:	10 92 7e 01 	sts	0x017E, r1
    204a:	42 c0       	rjmp	.+132    	; 0x20d0 <Timer_deinit+0xce>

	}else if (timer_ID == Timer1){
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	09 f5       	brne	.+66     	; 0x2094 <Timer_deinit+0x92>
		TCCR1A =0;
    2052:	ef e4       	ldi	r30, 0x4F	; 79
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	10 82       	st	Z, r1
		TCCR1B = 0;
    2058:	ee e4       	ldi	r30, 0x4E	; 78
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	10 82       	st	Z, r1
		TCNT1 = 0;
    205e:	ec e4       	ldi	r30, 0x4C	; 76
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	11 82       	std	Z+1, r1	; 0x01
    2064:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1);
    2066:	a9 e5       	ldi	r26, 0x59	; 89
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e9 e5       	ldi	r30, 0x59	; 89
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8b 7f       	andi	r24, 0xFB	; 251
    2072:	8c 93       	st	X, r24
		OCR1A = 0;
    2074:	ea e4       	ldi	r30, 0x4A	; 74
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	11 82       	std	Z+1, r1	; 0x01
    207a:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A);
    207c:	a9 e5       	ldi	r26, 0x59	; 89
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e9 e5       	ldi	r30, 0x59	; 89
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	8f 7e       	andi	r24, 0xEF	; 239
    2088:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    208a:	10 92 81 01 	sts	0x0181, r1
    208e:	10 92 80 01 	sts	0x0180, r1
    2092:	1e c0       	rjmp	.+60     	; 0x20d0 <Timer_deinit+0xce>

	}else if (timer_ID == Timer2){
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	d9 f4       	brne	.+54     	; 0x20d0 <Timer_deinit+0xce>
		TCCR2 = 0;
    209a:	e5 e4       	ldi	r30, 0x45	; 69
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	10 82       	st	Z, r1
		TCNT2 = 0;
    20a0:	e4 e4       	ldi	r30, 0x44	; 68
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	10 82       	st	Z, r1
		OCR2 = 0;
    20a6:	e3 e4       	ldi	r30, 0x43	; 67
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2);
    20ac:	a9 e5       	ldi	r26, 0x59	; 89
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e9 e5       	ldi	r30, 0x59	; 89
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8f 77       	andi	r24, 0x7F	; 127
    20b8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2);
    20ba:	a9 e5       	ldi	r26, 0x59	; 89
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e9 e5       	ldi	r30, 0x59	; 89
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8f 7b       	andi	r24, 0xBF	; 191
    20c6:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    20c8:	10 92 83 01 	sts	0x0183, r1
    20cc:	10 92 82 01 	sts	0x0182, r1
	}
}
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <__vector_9>:
ISR(TIMER0_OVF_vect) {
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    2102:	80 91 7e 01 	lds	r24, 0x017E
    2106:	90 91 7f 01 	lds	r25, 0x017F
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	29 f0       	breq	.+10     	; 0x2118 <__vector_9+0x40>
		(*g_Timer0CallBackPtr)();
    210e:	e0 91 7e 01 	lds	r30, 0x017E
    2112:	f0 91 7f 01 	lds	r31, 0x017F
    2116:	09 95       	icall
	}
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	ff 91       	pop	r31
    211e:	ef 91       	pop	r30
    2120:	bf 91       	pop	r27
    2122:	af 91       	pop	r26
    2124:	9f 91       	pop	r25
    2126:	8f 91       	pop	r24
    2128:	7f 91       	pop	r23
    212a:	6f 91       	pop	r22
    212c:	5f 91       	pop	r21
    212e:	4f 91       	pop	r20
    2130:	3f 91       	pop	r19
    2132:	2f 91       	pop	r18
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_19>:

ISR(TIMER0_COMP_vect) {
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	2f 93       	push	r18
    214a:	3f 93       	push	r19
    214c:	4f 93       	push	r20
    214e:	5f 93       	push	r21
    2150:	6f 93       	push	r22
    2152:	7f 93       	push	r23
    2154:	8f 93       	push	r24
    2156:	9f 93       	push	r25
    2158:	af 93       	push	r26
    215a:	bf 93       	push	r27
    215c:	ef 93       	push	r30
    215e:	ff 93       	push	r31
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    2168:	80 91 7e 01 	lds	r24, 0x017E
    216c:	90 91 7f 01 	lds	r25, 0x017F
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	29 f0       	breq	.+10     	; 0x217e <__vector_19+0x40>
		(*g_Timer0CallBackPtr)();
    2174:	e0 91 7e 01 	lds	r30, 0x017E
    2178:	f0 91 7f 01 	lds	r31, 0x017F
    217c:	09 95       	icall
	}
}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	ff 91       	pop	r31
    2184:	ef 91       	pop	r30
    2186:	bf 91       	pop	r27
    2188:	af 91       	pop	r26
    218a:	9f 91       	pop	r25
    218c:	8f 91       	pop	r24
    218e:	7f 91       	pop	r23
    2190:	6f 91       	pop	r22
    2192:	5f 91       	pop	r21
    2194:	4f 91       	pop	r20
    2196:	3f 91       	pop	r19
    2198:	2f 91       	pop	r18
    219a:	0f 90       	pop	r0
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	0f 90       	pop	r0
    21a0:	1f 90       	pop	r1
    21a2:	18 95       	reti

000021a4 <__vector_8>:

ISR(TIMER1_OVF_vect) {
    21a4:	1f 92       	push	r1
    21a6:	0f 92       	push	r0
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	0f 92       	push	r0
    21ac:	11 24       	eor	r1, r1
    21ae:	2f 93       	push	r18
    21b0:	3f 93       	push	r19
    21b2:	4f 93       	push	r20
    21b4:	5f 93       	push	r21
    21b6:	6f 93       	push	r22
    21b8:	7f 93       	push	r23
    21ba:	8f 93       	push	r24
    21bc:	9f 93       	push	r25
    21be:	af 93       	push	r26
    21c0:	bf 93       	push	r27
    21c2:	ef 93       	push	r30
    21c4:	ff 93       	push	r31
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    21ce:	80 91 80 01 	lds	r24, 0x0180
    21d2:	90 91 81 01 	lds	r25, 0x0181
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	29 f0       	breq	.+10     	; 0x21e4 <__vector_8+0x40>
		(*g_Timer1CallBackPtr)();
    21da:	e0 91 80 01 	lds	r30, 0x0180
    21de:	f0 91 81 01 	lds	r31, 0x0181
    21e2:	09 95       	icall
	}
}
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	ff 91       	pop	r31
    21ea:	ef 91       	pop	r30
    21ec:	bf 91       	pop	r27
    21ee:	af 91       	pop	r26
    21f0:	9f 91       	pop	r25
    21f2:	8f 91       	pop	r24
    21f4:	7f 91       	pop	r23
    21f6:	6f 91       	pop	r22
    21f8:	5f 91       	pop	r21
    21fa:	4f 91       	pop	r20
    21fc:	3f 91       	pop	r19
    21fe:	2f 91       	pop	r18
    2200:	0f 90       	pop	r0
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	0f 90       	pop	r0
    2206:	1f 90       	pop	r1
    2208:	18 95       	reti

0000220a <__vector_6>:

ISR(TIMER1_COMPA_vect) {
    220a:	1f 92       	push	r1
    220c:	0f 92       	push	r0
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	0f 92       	push	r0
    2212:	11 24       	eor	r1, r1
    2214:	2f 93       	push	r18
    2216:	3f 93       	push	r19
    2218:	4f 93       	push	r20
    221a:	5f 93       	push	r21
    221c:	6f 93       	push	r22
    221e:	7f 93       	push	r23
    2220:	8f 93       	push	r24
    2222:	9f 93       	push	r25
    2224:	af 93       	push	r26
    2226:	bf 93       	push	r27
    2228:	ef 93       	push	r30
    222a:	ff 93       	push	r31
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    2234:	80 91 80 01 	lds	r24, 0x0180
    2238:	90 91 81 01 	lds	r25, 0x0181
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	29 f0       	breq	.+10     	; 0x224a <__vector_6+0x40>
		(*g_Timer1CallBackPtr)();
    2240:	e0 91 80 01 	lds	r30, 0x0180
    2244:	f0 91 81 01 	lds	r31, 0x0181
    2248:	09 95       	icall
	}
}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	ff 91       	pop	r31
    2250:	ef 91       	pop	r30
    2252:	bf 91       	pop	r27
    2254:	af 91       	pop	r26
    2256:	9f 91       	pop	r25
    2258:	8f 91       	pop	r24
    225a:	7f 91       	pop	r23
    225c:	6f 91       	pop	r22
    225e:	5f 91       	pop	r21
    2260:	4f 91       	pop	r20
    2262:	3f 91       	pop	r19
    2264:	2f 91       	pop	r18
    2266:	0f 90       	pop	r0
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	0f 90       	pop	r0
    226c:	1f 90       	pop	r1
    226e:	18 95       	reti

00002270 <__vector_4>:

ISR(TIMER2_OVF_vect) {
    2270:	1f 92       	push	r1
    2272:	0f 92       	push	r0
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	0f 92       	push	r0
    2278:	11 24       	eor	r1, r1
    227a:	2f 93       	push	r18
    227c:	3f 93       	push	r19
    227e:	4f 93       	push	r20
    2280:	5f 93       	push	r21
    2282:	6f 93       	push	r22
    2284:	7f 93       	push	r23
    2286:	8f 93       	push	r24
    2288:	9f 93       	push	r25
    228a:	af 93       	push	r26
    228c:	bf 93       	push	r27
    228e:	ef 93       	push	r30
    2290:	ff 93       	push	r31
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    229a:	80 91 82 01 	lds	r24, 0x0182
    229e:	90 91 83 01 	lds	r25, 0x0183
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	29 f0       	breq	.+10     	; 0x22b0 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    22a6:	e0 91 82 01 	lds	r30, 0x0182
    22aa:	f0 91 83 01 	lds	r31, 0x0183
    22ae:	09 95       	icall
	}
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	ff 91       	pop	r31
    22b6:	ef 91       	pop	r30
    22b8:	bf 91       	pop	r27
    22ba:	af 91       	pop	r26
    22bc:	9f 91       	pop	r25
    22be:	8f 91       	pop	r24
    22c0:	7f 91       	pop	r23
    22c2:	6f 91       	pop	r22
    22c4:	5f 91       	pop	r21
    22c6:	4f 91       	pop	r20
    22c8:	3f 91       	pop	r19
    22ca:	2f 91       	pop	r18
    22cc:	0f 90       	pop	r0
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	0f 90       	pop	r0
    22d2:	1f 90       	pop	r1
    22d4:	18 95       	reti

000022d6 <__vector_3>:

ISR(TIMER2_COMP_vect) {
    22d6:	1f 92       	push	r1
    22d8:	0f 92       	push	r0
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	0f 92       	push	r0
    22de:	11 24       	eor	r1, r1
    22e0:	2f 93       	push	r18
    22e2:	3f 93       	push	r19
    22e4:	4f 93       	push	r20
    22e6:	5f 93       	push	r21
    22e8:	6f 93       	push	r22
    22ea:	7f 93       	push	r23
    22ec:	8f 93       	push	r24
    22ee:	9f 93       	push	r25
    22f0:	af 93       	push	r26
    22f2:	bf 93       	push	r27
    22f4:	ef 93       	push	r30
    22f6:	ff 93       	push	r31
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    2300:	80 91 82 01 	lds	r24, 0x0182
    2304:	90 91 83 01 	lds	r25, 0x0183
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	29 f0       	breq	.+10     	; 0x2316 <__vector_3+0x40>
		(*g_Timer2CallBackPtr)();
    230c:	e0 91 82 01 	lds	r30, 0x0182
    2310:	f0 91 83 01 	lds	r31, 0x0183
    2314:	09 95       	icall
	}
}
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	0f 90       	pop	r0
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	0f 90       	pop	r0
    2338:	1f 90       	pop	r1
    233a:	18 95       	reti

0000233c <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_Config *config_ptr)
{
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <TWI_init+0xa>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using pre-scaler 1 (00) TWPS=00 and F_CPU=8Mhz */
    //TWBR = 0x02;
	TWSR = 0x00;
    234e:	e1 e2       	ldi	r30, 0x21	; 33
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	10 82       	st	Z, r1
	TWBR = (uint8)(((F_CPU/config_ptr->bitrate)-16)/8);
    2354:	00 e2       	ldi	r16, 0x20	; 32
    2356:	10 e0       	ldi	r17, 0x00	; 0
    2358:	e9 81       	ldd	r30, Y+1	; 0x01
    235a:	fa 81       	ldd	r31, Y+2	; 0x02
    235c:	20 81       	ld	r18, Z
    235e:	31 81       	ldd	r19, Z+1	; 0x01
    2360:	42 81       	ldd	r20, Z+2	; 0x02
    2362:	53 81       	ldd	r21, Z+3	; 0x03
    2364:	80 e4       	ldi	r24, 0x40	; 64
    2366:	92 e4       	ldi	r25, 0x42	; 66
    2368:	af e0       	ldi	r26, 0x0F	; 15
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__udivmodsi4>
    2374:	da 01       	movw	r26, r20
    2376:	c9 01       	movw	r24, r18
    2378:	40 97       	sbiw	r24, 0x10	; 16
    237a:	a1 09       	sbc	r26, r1
    237c:	b1 09       	sbc	r27, r1
    237e:	68 94       	set
    2380:	12 f8       	bld	r1, 2
    2382:	b6 95       	lsr	r27
    2384:	a7 95       	ror	r26
    2386:	97 95       	ror	r25
    2388:	87 95       	ror	r24
    238a:	16 94       	lsr	r1
    238c:	d1 f7       	brne	.-12     	; 0x2382 <TWI_init+0x46>
    238e:	f8 01       	movw	r30, r16
    2390:	80 83       	st	Z, r24

	TWSR = (TWSR & 0xF3) | ((config_ptr->pre));
    2392:	a1 e2       	ldi	r26, 0x21	; 33
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	e1 e2       	ldi	r30, 0x21	; 33
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	98 2f       	mov	r25, r24
    239e:	93 7f       	andi	r25, 0xF3	; 243
    23a0:	e9 81       	ldd	r30, Y+1	; 0x01
    23a2:	fa 81       	ldd	r31, Y+2	; 0x02
    23a4:	84 81       	ldd	r24, Z+4	; 0x04
    23a6:	89 2b       	or	r24, r25
    23a8:	8c 93       	st	X, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    23aa:	e2 e2       	ldi	r30, 0x22	; 34
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    23b2:	e6 e5       	ldi	r30, 0x56	; 86
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	80 83       	st	Z, r24
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	08 95       	ret

000023c8 <TWI_start>:

void TWI_start(void)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    23d0:	e6 e5       	ldi	r30, 0x56	; 86
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	84 ea       	ldi	r24, 0xA4	; 164
    23d6:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23d8:	e6 e5       	ldi	r30, 0x56	; 86
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	88 23       	and	r24, r24
    23e0:	dc f7       	brge	.-10     	; 0x23d8 <TWI_start+0x10>
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <TWI_stop>:

void TWI_stop(void)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    23f0:	e6 e5       	ldi	r30, 0x56	; 86
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	84 e9       	ldi	r24, 0x94	; 148
    23f6:	80 83       	st	Z, r24
}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    240a:	e3 e2       	ldi	r30, 0x23	; 35
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2412:	e6 e5       	ldi	r30, 0x56	; 86
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	84 e8       	ldi	r24, 0x84	; 132
    2418:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    241a:	e6 e5       	ldi	r30, 0x56	; 86
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	88 23       	and	r24, r24
    2422:	dc f7       	brge	.-10     	; 0x241a <TWI_writeByte+0x1c>
}
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2434:	e6 e5       	ldi	r30, 0x56	; 86
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	84 ec       	ldi	r24, 0xC4	; 196
    243a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    243c:	e6 e5       	ldi	r30, 0x56	; 86
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	88 23       	and	r24, r24
    2444:	dc f7       	brge	.-10     	; 0x243c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2446:	e3 e2       	ldi	r30, 0x23	; 35
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    245a:	e6 e5       	ldi	r30, 0x56	; 86
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	84 e8       	ldi	r24, 0x84	; 132
    2460:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2462:	e6 e5       	ldi	r30, 0x56	; 86
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	88 23       	and	r24, r24
    246a:	dc f7       	brge	.-10     	; 0x2462 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    246c:	e3 e2       	ldi	r30, 0x23	; 35
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
}
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	0f 92       	push	r0
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2482:	e1 e2       	ldi	r30, 0x21	; 33
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 7f       	andi	r24, 0xF8	; 248
    248a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
}
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const uart_config *config_ptr)
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	00 d0       	rcall	.+0      	; 0x249c <UART_init+0x6>
    249c:	00 d0       	rcall	.+0      	; 0x249e <UART_init+0x8>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    24a6:	1a 82       	std	Y+2, r1	; 0x02
    24a8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    24aa:	eb e2       	ldi	r30, 0x2B	; 43
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL);
    24b2:	e0 e4       	ldi	r30, 0x40	; 64
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 e8       	ldi	r24, 0x80	; 128
    24b8:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN);
    24ba:	ea e2       	ldi	r30, 0x2A	; 42
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	88 e1       	ldi	r24, 0x18	; 24
    24c0:	80 83       	st	Z, r24

	if((config_ptr->number_of_data_bits) == char_size_9){
    24c2:	eb 81       	ldd	r30, Y+3	; 0x03
    24c4:	fc 81       	ldd	r31, Y+4	; 0x04
    24c6:	80 81       	ld	r24, Z
    24c8:	87 30       	cpi	r24, 0x07	; 7
    24ca:	41 f4       	brne	.+16     	; 0x24dc <UART_init+0x46>
		UCSRC|=6;
    24cc:	a0 e4       	ldi	r26, 0x40	; 64
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e0 e4       	ldi	r30, 0x40	; 64
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	86 60       	ori	r24, 0x06	; 6
    24d8:	8c 93       	st	X, r24
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <UART_init+0x64>
	}
	else{
		UCSRC |= ((config_ptr-> number_of_data_bits)<<1);
    24dc:	a0 e4       	ldi	r26, 0x40	; 64
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e0 e4       	ldi	r30, 0x40	; 64
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	28 2f       	mov	r18, r24
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	80 81       	ld	r24, Z
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	82 2b       	or	r24, r18
    24f8:	8c 93       	st	X, r24
	}

	UCSRC |= ((config_ptr-> parity)<<4);
    24fa:	a0 e4       	ldi	r26, 0x40	; 64
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e0 e4       	ldi	r30, 0x40	; 64
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	28 2f       	mov	r18, r24
    2506:	eb 81       	ldd	r30, Y+3	; 0x03
    2508:	fc 81       	ldd	r31, Y+4	; 0x04
    250a:	81 81       	ldd	r24, Z+1	; 0x01
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	82 95       	swap	r24
    2512:	92 95       	swap	r25
    2514:	90 7f       	andi	r25, 0xF0	; 240
    2516:	98 27       	eor	r25, r24
    2518:	80 7f       	andi	r24, 0xF0	; 240
    251a:	98 27       	eor	r25, r24
    251c:	82 2b       	or	r24, r18
    251e:	8c 93       	st	X, r24
	UCSRC |= ((config_ptr-> number_of_stop_bits)<<3);
    2520:	a0 e4       	ldi	r26, 0x40	; 64
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e0 e4       	ldi	r30, 0x40	; 64
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	28 2f       	mov	r18, r24
    252c:	eb 81       	ldd	r30, Y+3	; 0x03
    252e:	fc 81       	ldd	r31, Y+4	; 0x04
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	82 2b       	or	r24, r18
    2544:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((config_ptr->baud_rate) * 8UL))) - 1);
    2546:	eb 81       	ldd	r30, Y+3	; 0x03
    2548:	fc 81       	ldd	r31, Y+4	; 0x04
    254a:	83 81       	ldd	r24, Z+3	; 0x03
    254c:	94 81       	ldd	r25, Z+4	; 0x04
    254e:	cc 01       	movw	r24, r24
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	aa 1f       	adc	r26, r26
    255a:	bb 1f       	adc	r27, r27
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	aa 1f       	adc	r26, r26
    2562:	bb 1f       	adc	r27, r27
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	aa 1f       	adc	r26, r26
    256a:	bb 1f       	adc	r27, r27
    256c:	9c 01       	movw	r18, r24
    256e:	ad 01       	movw	r20, r26
    2570:	80 e4       	ldi	r24, 0x40	; 64
    2572:	92 e4       	ldi	r25, 0x42	; 66
    2574:	af e0       	ldi	r26, 0x0F	; 15
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__udivmodsi4>
    2580:	da 01       	movw	r26, r20
    2582:	c9 01       	movw	r24, r18
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    258a:	e0 e4       	ldi	r30, 0x40	; 64
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	89 2f       	mov	r24, r25
    2594:	99 27       	eor	r25, r25
    2596:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2598:	e9 e2       	ldi	r30, 0x29	; 41
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	80 83       	st	Z, r24
}
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    25ba:	eb e2       	ldi	r30, 0x2B	; 43
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	80 72       	andi	r24, 0x20	; 32
    25c6:	90 70       	andi	r25, 0x00	; 0
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	b9 f3       	breq	.-18     	; 0x25ba <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    25cc:	ec e2       	ldi	r30, 0x2C	; 44
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    25e4:	eb e2       	ldi	r30, 0x2B	; 43
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 23       	and	r24, r24
    25ec:	dc f7       	brge	.-10     	; 0x25e4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    25ee:	ec e2       	ldi	r30, 0x2C	; 44
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
}
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <UART_sendString+0x6>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9b 83       	std	Y+3, r25	; 0x03
    2608:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    260a:	19 82       	std	Y+1, r1	; 0x01
    260c:	0e c0       	rjmp	.+28     	; 0x262a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	80 81       	ld	r24, Z
    2620:	0e 94 d7 12 	call	0x25ae	; 0x25ae <UART_sendByte>
		i++;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	88 23       	and	r24, r24
    263e:	39 f7       	brne	.-50     	; 0x260e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	00 d0       	rcall	.+0      	; 0x2656 <UART_receiveString+0xa>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	9b 83       	std	Y+3, r25	; 0x03
    265e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2660:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	8c 01       	movw	r16, r24
    266e:	02 0f       	add	r16, r18
    2670:	13 1f       	adc	r17, r19
    2672:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_recieveByte>
    2676:	f8 01       	movw	r30, r16
    2678:	80 83       	st	Z, r24
    267a:	0f c0       	rjmp	.+30     	; 0x269a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	8c 01       	movw	r16, r24
    268e:	02 0f       	add	r16, r18
    2690:	13 1f       	adc	r17, r19
    2692:	0e 94 ee 12 	call	0x25dc	; 0x25dc <UART_recieveByte>
    2696:	f8 01       	movw	r30, r16
    2698:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	fc 01       	movw	r30, r24
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	80 81       	ld	r24, Z
    26ac:	83 32       	cpi	r24, 0x23	; 35
    26ae:	31 f7       	brne	.-52     	; 0x267c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ba:	fc 01       	movw	r30, r24
    26bc:	e2 0f       	add	r30, r18
    26be:	f3 1f       	adc	r31, r19
    26c0:	10 82       	st	Z, r1
}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <__udivmodsi4>:
    26d2:	a1 e2       	ldi	r26, 0x21	; 33
    26d4:	1a 2e       	mov	r1, r26
    26d6:	aa 1b       	sub	r26, r26
    26d8:	bb 1b       	sub	r27, r27
    26da:	fd 01       	movw	r30, r26
    26dc:	0d c0       	rjmp	.+26     	; 0x26f8 <__udivmodsi4_ep>

000026de <__udivmodsi4_loop>:
    26de:	aa 1f       	adc	r26, r26
    26e0:	bb 1f       	adc	r27, r27
    26e2:	ee 1f       	adc	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	a2 17       	cp	r26, r18
    26e8:	b3 07       	cpc	r27, r19
    26ea:	e4 07       	cpc	r30, r20
    26ec:	f5 07       	cpc	r31, r21
    26ee:	20 f0       	brcs	.+8      	; 0x26f8 <__udivmodsi4_ep>
    26f0:	a2 1b       	sub	r26, r18
    26f2:	b3 0b       	sbc	r27, r19
    26f4:	e4 0b       	sbc	r30, r20
    26f6:	f5 0b       	sbc	r31, r21

000026f8 <__udivmodsi4_ep>:
    26f8:	66 1f       	adc	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	1a 94       	dec	r1
    2702:	69 f7       	brne	.-38     	; 0x26de <__udivmodsi4_loop>
    2704:	60 95       	com	r22
    2706:	70 95       	com	r23
    2708:	80 95       	com	r24
    270a:	90 95       	com	r25
    270c:	9b 01       	movw	r18, r22
    270e:	ac 01       	movw	r20, r24
    2710:	bd 01       	movw	r22, r26
    2712:	cf 01       	movw	r24, r30
    2714:	08 95       	ret

00002716 <__prologue_saves__>:
    2716:	2f 92       	push	r2
    2718:	3f 92       	push	r3
    271a:	4f 92       	push	r4
    271c:	5f 92       	push	r5
    271e:	6f 92       	push	r6
    2720:	7f 92       	push	r7
    2722:	8f 92       	push	r8
    2724:	9f 92       	push	r9
    2726:	af 92       	push	r10
    2728:	bf 92       	push	r11
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	ca 1b       	sub	r28, r26
    2740:	db 0b       	sbc	r29, r27
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	09 94       	ijmp

0000274e <__epilogue_restores__>:
    274e:	2a 88       	ldd	r2, Y+18	; 0x12
    2750:	39 88       	ldd	r3, Y+17	; 0x11
    2752:	48 88       	ldd	r4, Y+16	; 0x10
    2754:	5f 84       	ldd	r5, Y+15	; 0x0f
    2756:	6e 84       	ldd	r6, Y+14	; 0x0e
    2758:	7d 84       	ldd	r7, Y+13	; 0x0d
    275a:	8c 84       	ldd	r8, Y+12	; 0x0c
    275c:	9b 84       	ldd	r9, Y+11	; 0x0b
    275e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2760:	b9 84       	ldd	r11, Y+9	; 0x09
    2762:	c8 84       	ldd	r12, Y+8	; 0x08
    2764:	df 80       	ldd	r13, Y+7	; 0x07
    2766:	ee 80       	ldd	r14, Y+6	; 0x06
    2768:	fd 80       	ldd	r15, Y+5	; 0x05
    276a:	0c 81       	ldd	r16, Y+4	; 0x04
    276c:	1b 81       	ldd	r17, Y+3	; 0x03
    276e:	aa 81       	ldd	r26, Y+2	; 0x02
    2770:	b9 81       	ldd	r27, Y+1	; 0x01
    2772:	ce 0f       	add	r28, r30
    2774:	d1 1d       	adc	r29, r1
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	ed 01       	movw	r28, r26
    2782:	08 95       	ret

00002784 <_exit>:
    2784:	f8 94       	cli

00002786 <__stop_program>:
    2786:	ff cf       	rjmp	.-2      	; 0x2786 <__stop_program>
